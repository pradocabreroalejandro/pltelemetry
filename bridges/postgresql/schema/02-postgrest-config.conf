# ============================================
# FILE: 02-postgrest-config.conf
# PostgREST Configuration for PLTelemetry
# ============================================

# This file configures PostgREST to expose the telemetry schema
# as a REST API that the PostgreSQL bridge can consume.

# Database connection
db-uri = "postgres://pltel_writer:your_password@localhost:5432/pltelemetry_db"

# Schema to expose
db-schemas = "telemetry"

# Anonymous role (user for unauthenticated requests)
db-anon-role = "pltel_writer"

# Server configuration
server-host = "*"
server-port = 3000

# JWT secret (optional - only if using authentication)
# jwt-secret = "your-256-bit-secret-here"
# jwt-aud = "pltelemetry-api"

# Connection pool
db-pool = 10
db-pool-acquisition-timeout = 10

# Logging
log-level = "warn"

# ============================================
# FILE: 03-postgrest-writer.conf
# PostgREST Writer Instance Configuration
# ============================================

# Writer instance - for INSERT operations
db-uri = "postgres://pltel_writer:your_password@localhost:5432/pltelemetry_db"
db-schemas = "telemetry"
db-anon-role = "pltel_writer"
server-port = 3000

# Performance optimizations for writes
db-pool = 20
db-pool-acquisition-timeout = 5
server-proxy-uri = "http://localhost:3000"

# ============================================
# FILE: 04-postgrest-reader.conf  
# PostgREST Reader Instance Configuration (Optional)
# ============================================

# Reader instance - for SELECT operations (Grafana, dashboards)
db-uri = "postgres://pltel_reader:your_password@localhost:5432/pltelemetry_db"
db-schemas = "telemetry"
db-anon-role = "pltel_reader"
server-port = 3001

# Optimizations for read queries
db-pool = 50
db-pool-acquisition-timeout = 10
db-prepared-statements = true

# Security - read only
db-tx-end = "commit-allow-override"
db-max-rows = 1000

# ============================================
# FILE: 05-postgrest-setup.sh
# Setup script for PostgREST service
# ============================================

#!/bin/bash

# PostgREST setup script for PLTelemetry
# Tested on: RedHat 9.6, Ubuntu 22.04

set -e

echo "=== PostgREST Setup for PLTelemetry ==="

# Check if running as root
if [[ $EUID -ne 0 ]]; then
   echo "This script must be run as root (use sudo)"
   exit 1
fi

# Install PostgREST if not present
if ! command -v postgrest &> /dev/null; then
    echo "Installing PostgREST..."
    
    # For RedHat/CentOS/Fedora
    if command -v dnf &> /dev/null; then
        dnf install -y postgrest
    # For Ubuntu/Debian
    elif command -v apt-get &> /dev/null; then
        apt-get update
        apt-get install -y postgrest
    else
        echo "Please install PostgREST manually from: https://postgrest.org"
        exit 1
    fi
fi

# Create config directory
mkdir -p /etc/postgrest

# Copy configuration files
echo "Copying configuration files..."
cp 02-postgrest-config.conf /etc/postgrest/postgrest.conf
cp 03-postgrest-writer.conf /etc/postgrest/postgrest-writer.conf
cp 04-postgrest-reader.conf /etc/postgrest/postgrest-reader.conf

# Update passwords in config files
read -sp "Enter PostgreSQL password for pltel_writer: " WRITER_PASS
echo
sed -i "s/your_password/$WRITER_PASS/g" /etc/postgrest/postgrest-writer.conf

read -sp "Enter PostgreSQL password for pltel_reader: " READER_PASS
echo
sed -i "s/your_password/$READER_PASS/g" /etc/postgrest/postgrest-reader.conf

# Create systemd service for writer
cat > /etc/systemd/system/postgrest-writer.service <<EOF
[Unit]
Description=PostgREST Writer for PLTelemetry
After=postgresql.service

[Service]
Type=simple
User=postgrest
ExecStart=/usr/bin/postgrest /etc/postgrest/postgrest-writer.conf
ExecReload=/bin/kill -SIGUSR1 \$MAINPID
Restart=on-failure
RestartSec=5

[Install]
WantedBy=multi-user.target
EOF

# Create systemd service for reader (optional)
cat > /etc/systemd/system/postgrest-reader.service <<EOF
[Unit]
Description=PostgREST Reader for PLTelemetry
After=postgresql.service

[Service]
Type=simple
User=postgrest
ExecStart=/usr/bin/postgrest /etc/postgrest/postgrest-reader.conf
ExecReload=/bin/kill -SIGUSR1 \$MAINPID
Restart=on-failure
RestartSec=5

[Install]
WantedBy=multi-user.target
EOF

# Create postgrest user if not exists
if ! id "postgrest" &>/dev/null; then
    useradd -r -s /bin/false postgrest
fi

# Reload systemd
systemctl daemon-reload

# Enable and start services
echo "Enabling services..."
systemctl enable postgrest-writer.service
systemctl start postgrest-writer.service

echo "Starting reader service (optional)..."
systemctl enable postgrest-reader.service
systemctl start postgrest-reader.service

# Check status
echo ""
echo "=== Service Status ==="
systemctl status postgrest-writer --no-pager
echo ""
systemctl status postgrest-reader --no-pager

echo ""
echo "=== Testing endpoints ==="
sleep 2

# Test writer endpoint
if curl -s http://localhost:3000/ > /dev/null; then
    echo "✓ Writer endpoint (port 3000) is responding"
else
    echo "✗ Writer endpoint (port 3000) is not responding"
fi

# Test reader endpoint
if curl -s http://localhost:3001/ > /dev/null; then
    echo "✓ Reader endpoint (port 3001) is responding"
else
    echo "✗ Reader endpoint (port 3001) is not responding"
fi

echo ""
echo "=== Setup complete! ==="
echo "Writer API: http://localhost:3000"
echo "Reader API: http://localhost:3001"
echo ""
echo "Test with:"
echo "  curl http://localhost:3000/traces"
echo "  curl http://localhost:3001/traces"

# ============================================
# FILE: 06-docker-compose.yml
# Docker Compose setup (alternative to systemd)
# ============================================

version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15
    environment:
      POSTGRES_DB: pltelemetry_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres_password
    volumes:
      - ./01-database-setup.sql:/docker-entrypoint-initdb.d/01-database-setup.sql
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # PostgREST Writer
  postgrest-writer:
    image: postgrest/postgrest:latest
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      PGRST_DB_URI: postgres://pltel_writer:writer_password@postgres:5432/pltelemetry_db
      PGRST_DB_SCHEMAS: telemetry
      PGRST_DB_ANON_ROLE: pltel_writer
      PGRST_SERVER_PORT: 3000
    ports:
      - "3000:3000"

  # PostgREST Reader (optional)
  postgrest-reader:
    image: postgrest/postgrest:latest
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      PGRST_DB_URI: postgres://pltel_reader:reader_password@postgres:5432/pltelemetry_db
      PGRST_DB_SCHEMAS: telemetry
      PGRST_DB_ANON_ROLE: pltel_reader
      PGRST_SERVER_PORT: 3001
    ports:
      - "3001:3001"

  # Grafana (optional)
  grafana:
    image: grafana/grafana:latest
    depends_on:
      - postgres
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_USERS_ALLOW_SIGN_UP: false
    ports:
      - "3002:3000"
    volumes:
      - grafana_data:/var/lib/grafana

volumes:
  postgres_data:
  grafana_data:

# ============================================
# FILE: README-postgrest.md
# PostgREST Setup Documentation
# ============================================

# PostgREST Configuration for PLTelemetry

This directory contains the PostgREST configuration files needed to expose
the PostgreSQL telemetry database as a REST API.

## Files

- `02-postgrest-config.conf` - Basic configuration file
- `03-postgrest-writer.conf` - Writer instance configuration (port 3000)
- `04-postgrest-reader.conf` - Reader instance configuration (port 3001)
- `05-postgrest-setup.sh` - Automated setup script
- `06-docker-compose.yml` - Docker-based setup (alternative)

## Quick Start

### Option 1: System Service (Production)

```bash
sudo ./05-postgrest-setup.sh
```

### Option 2: Docker Compose (Development)

```bash
# Update passwords in docker-compose.yml first!
docker-compose up -d
```

### Option 3: Manual Setup

1. Install PostgREST:
   ```bash
   # RedHat/CentOS
   sudo dnf install postgrest
   
   # Ubuntu/Debian
   sudo apt install postgrest
   ```

2. Copy configuration:
   ```bash
   sudo cp 03-postgrest-writer.conf /etc/postgrest/
   ```

3. Update passwords in the config file

4. Start PostgREST:
   ```bash
   postgrest /etc/postgrest/postgrest-writer.conf
   ```

## Configuration Details

### Writer Instance (Port 3000)
- Used by PLT_POSTGRES_BRIDGE for INSERT operations
- User: `pltel_writer`
- Permissions: INSERT, UPDATE on telemetry tables

### Reader Instance (Port 3001)
- Used by Grafana and dashboards
- User: `pltel_reader`  
- Permissions: SELECT only
- Row limit: 1000 (configurable)

## Security Considerations

1. **Network Security**:
   - Use firewall rules to restrict access
   - Consider using a reverse proxy (nginx) for HTTPS
   - Bind to localhost only if not needed externally

2. **Authentication Options**:
   - Basic: PostgreSQL roles (current setup)
   - JWT: Uncomment jwt-secret in config
   - API Key: Implement via reverse proxy

3. **Production Checklist**:
   - [ ] Change default passwords
   - [ ] Enable HTTPS
   - [ ] Set up monitoring
   - [ ] Configure log rotation
   - [ ] Implement rate limiting

## Testing

Test the endpoints:

```bash
# Test writer
curl -X POST http://localhost:3000/traces \
  -H "Content-Type: application/json" \
  -d '{"trace_id":"test123","root_operation":"test"}'

# Test reader
curl http://localhost:3001/traces

# Check OpenAPI spec
curl http://localhost:3000/
```

## Troubleshooting

1. **Connection refused**:
   ```bash
   sudo systemctl status postgrest-writer
   sudo journalctl -u postgrest-writer -f
   ```

2. **Authentication failed**:
   - Check PostgreSQL user passwords
   - Verify user permissions in database

3. **Performance issues**:
   - Increase `db-pool` in config
   - Check PostgreSQL indexes
   - Monitor with `pg_stat_statements`