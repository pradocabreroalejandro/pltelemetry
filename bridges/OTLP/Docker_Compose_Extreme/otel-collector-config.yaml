# =============================================================================
# OTEL COLLECTOR CONFIGURATION FOR PLTELEMETRY - FIXED FOR AGENT METRICS
# File: otel-collector-config.yaml
# =============================================================================

receivers:
  # HTTP receiver for PLTelemetry (Oracle PL/SQL)
  otlp:
    protocols:
      grpc:
        endpoint: 0.0.0.0:4317
      http:
        endpoint: 0.0.0.0:4318
        cors:
          allowed_origins:
            - "*"
          allowed_headers:
            - "*"

  # Prometheus receiver for collector metrics
  prometheus:
    config:
      scrape_configs:
        - job_name: 'otel-collector'
          scrape_interval: 10s
          static_configs:
            - targets: ['localhost:8888']

processors:
  # Batch processor
  batch:
    timeout: 500ms
    send_batch_size: 2048
    send_batch_max_size: 4096

  # Memory limiter to prevent OOM
  memory_limiter:
    limit_mib: 1536
    spike_limit_mib: 512
    check_interval: 500ms

  # Attributes processor for PLTelemetry specific handling
  attributes:
    actions:
      # Add source identification
      - key: telemetry.source
        value: "oracle-plsql"
        action: insert

  # ðŸ”¥ FIXED: Resource processor - BACK TO WORKING VERSION
  resource:
    attributes:
      # Remove conflicting resource attributes before prometheus export
      - key: source
        action: delete
      - key: telemetry.source
        action: delete
      # Keep essential resource info with safe names
      - key: otel.service.name
        from_attribute: service.name
        action: upsert
      - key: otel.service.version
        from_attribute: service.version
        action: upsert

exporters:
  # Send traces to Tempo
  otlp/tempo:
    endpoint: http://tempo:4317
    tls:
      insecure: true

  # Send logs to Loki
  loki:
    endpoint: http://loki:3100/loki/api/v1/push

  # ðŸ”¥ FIXED: Prometheus exporter - BACK TO WORKING CONFIG
  prometheus:
    endpoint: "0.0.0.0:8889"
    namespace: "pltelemetry"
    send_timestamps: true
    metric_expiration: 180m
    # ðŸ”¥ CRITICAL: This was the issue - set back to false
    resource_to_telemetry_conversion:
      enabled: false
    # Enable metric relabeling
    enable_open_metrics: true

  # Debug output for development
  debug:
    verbosity: detailed
    sampling_initial: 5
    sampling_thereafter: 200

  # File export for backup/debugging
  file:
    path: /tmp/otel-output.json

service:
  pipelines:
    # Traces pipeline
    traces:
      receivers: [otlp]
      processors: [memory_limiter, resource, batch]
      exporters: [otlp/tempo, debug]

    # ðŸ”¥ FIXED: Metrics pipeline with proper resource handling
    metrics:
      receivers: [otlp, prometheus]
      processors: [memory_limiter, resource, batch]
      exporters: [prometheus, debug]

    # Logs pipeline
    logs:
      receivers: [otlp]
      processors: [memory_limiter, attributes, batch]
      exporters: [loki, debug]