-- PLTelemetry Database Tables
-- This script creates all required tables for PLTelemetry
-- 
-- Tables created:
-- - plt_traces: Main trace records
-- - plt_spans: Span records within traces  
-- - plt_events: Events within spans
-- - plt_metrics: Metric records
-- - plt_queue: Async processing queue
-- - plt_failed_exports: Failed export attempts
-- - plt_telemetry_errors: Error logging

PROMPT Creating PLTelemetry tables...

-- Drop existing tables if they exist (for reinstall)
DECLARE
    l_sql VARCHAR2(1000);
    l_count NUMBER;
BEGIN
    FOR rec IN (
        SELECT table_name 
        FROM user_tables 
        WHERE table_name IN ('PLT_TRACES', 'PLT_SPANS', 'PLT_EVENTS', 'PLT_METRICS', 
                            'PLT_FAILED_EXPORTS', 'PLT_QUEUE', 'PLT_TELEMETRY_ERRORS')
    ) LOOP
        l_sql := 'DROP TABLE ' || rec.table_name || ' CASCADE CONSTRAINTS';
        EXECUTE IMMEDIATE l_sql;
        DBMS_OUTPUT.PUT_LINE('Dropped existing table: ' || rec.table_name);
    END LOOP;
END;
/

-- Main traces table
CREATE TABLE plt_traces (
    trace_id VARCHAR2(32) PRIMARY KEY,
    root_operation VARCHAR2(255) NOT NULL,
    start_time TIMESTAMP WITH TIME ZONE DEFAULT SYSTIMESTAMP NOT NULL,
    end_time TIMESTAMP WITH TIME ZONE,
    service_name VARCHAR2(100) DEFAULT 'oracle-plsql',
    service_instance VARCHAR2(255)
);

COMMENT ON TABLE plt_traces IS 'OpenTelemetry traces - root operations';
COMMENT ON COLUMN plt_traces.trace_id IS '128-bit trace ID (32 hex chars)';
COMMENT ON COLUMN plt_traces.root_operation IS 'Name of the root operation';
COMMENT ON COLUMN plt_traces.service_name IS 'Service identifier';
COMMENT ON COLUMN plt_traces.service_instance IS 'Service instance identifier';

-- Spans table
CREATE TABLE plt_spans (
    span_id VARCHAR2(16) PRIMARY KEY,
    trace_id VARCHAR2(32) NOT NULL,
    parent_span_id VARCHAR2(16),
    operation_name VARCHAR2(255) NOT NULL,
    start_time TIMESTAMP WITH TIME ZONE DEFAULT SYSTIMESTAMP NOT NULL,
    end_time TIMESTAMP WITH TIME ZONE,
    duration_ms NUMBER,
    status VARCHAR2(50) DEFAULT 'RUNNING',
    CONSTRAINT fk_spans_trace FOREIGN KEY (trace_id) REFERENCES plt_traces(trace_id),
    CONSTRAINT fk_spans_parent FOREIGN KEY (parent_span_id) REFERENCES plt_spans(span_id),
    CONSTRAINT chk_spans_status CHECK (status IN ('RUNNING', 'OK', 'ERROR', 'CANCELLED'))
);

COMMENT ON TABLE plt_spans IS 'OpenTelemetry spans - individual operations within traces';
COMMENT ON COLUMN plt_spans.span_id IS '64-bit span ID (16 hex chars)';
COMMENT ON COLUMN plt_spans.parent_span_id IS 'Parent span for nested operations';
COMMENT ON COLUMN plt_spans.duration_ms IS 'Span duration in milliseconds';

-- Events table
CREATE TABLE plt_events (
    event_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    span_id VARCHAR2(16) NOT NULL,
    event_name VARCHAR2(255) NOT NULL,
    event_time TIMESTAMP WITH TIME ZONE DEFAULT SYSTIMESTAMP NOT NULL,
    attributes VARCHAR2(4000),
    CONSTRAINT fk_events_span FOREIGN KEY (span_id) REFERENCES plt_spans(span_id)
);

COMMENT ON TABLE plt_events IS 'Events within spans - point-in-time occurrences';
COMMENT ON COLUMN plt_events.attributes IS 'JSON attributes for the event';

-- Metrics table
CREATE TABLE plt_metrics (
    metric_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    metric_name VARCHAR2(255) NOT NULL,
    metric_value NUMBER NOT NULL,
    metric_unit VARCHAR2(50),
    trace_id VARCHAR2(32),
    span_id VARCHAR2(16),
    timestamp TIMESTAMP WITH TIME ZONE DEFAULT SYSTIMESTAMP NOT NULL,
    attributes VARCHAR2(4000),
    CONSTRAINT fk_metrics_trace FOREIGN KEY (trace_id) REFERENCES plt_traces(trace_id),
    CONSTRAINT fk_metrics_span FOREIGN KEY (span_id) REFERENCES plt_spans(span_id)
);

COMMENT ON TABLE plt_metrics IS 'Application metrics with telemetry context';
COMMENT ON COLUMN plt_metrics.metric_unit IS 'Unit of measurement (ms, bytes, requests, etc.)';
COMMENT ON COLUMN plt_metrics.attributes IS 'JSON attributes for the metric';

-- Failed exports table
CREATE TABLE plt_failed_exports (
    export_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    export_time TIMESTAMP WITH TIME ZONE DEFAULT SYSTIMESTAMP NOT NULL,
    http_status NUMBER,
    payload VARCHAR2(4000),
    error_message VARCHAR2(4000),
    retry_count NUMBER DEFAULT 0,
    last_retry TIMESTAMP WITH TIME ZONE
);

COMMENT ON TABLE plt_failed_exports IS 'Failed telemetry export attempts for debugging';
COMMENT ON COLUMN plt_failed_exports.payload IS 'Truncated payload that failed to export';

-- Async processing queue
CREATE TABLE plt_queue (
    queue_id NUMBER GENERATED BY DEFAULT AS IDENTITY (
        START WITH 1 
        MAXVALUE 9999999999999999999999999999 
        MINVALUE 1 
        NOCYCLE 
        CACHE 20 
        NOORDER 
        NOKEEP
    ) NOT NULL,
    payload VARCHAR2(4000) NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT SYSTIMESTAMP NOT NULL,
    processed CHAR(1) DEFAULT 'N' NOT NULL,
    process_attempts NUMBER DEFAULT 0 NOT NULL,
    processed_time TIMESTAMP WITH TIME ZONE,
    last_error VARCHAR2(4000),
    last_attempt_time TIMESTAMP WITH TIME ZONE,
    CONSTRAINT pk_plt_queue PRIMARY KEY (queue_id),
    CONSTRAINT chk_plt_queue_processed CHECK (processed IN ('Y', 'N'))
);

COMMENT ON TABLE plt_queue IS 'Async processing queue for telemetry export';
COMMENT ON COLUMN plt_queue.payload IS 'JSON payload to be exported';
COMMENT ON COLUMN plt_queue.process_attempts IS 'Number of processing attempts (max 3)';

-- Error logging table
CREATE TABLE plt_telemetry_errors (
    error_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    error_time TIMESTAMP WITH TIME ZONE DEFAULT SYSTIMESTAMP NOT NULL,
    error_message VARCHAR2(4000),
    error_stack VARCHAR2(4000),
    error_code NUMBER,
    module_name VARCHAR2(100),
    trace_id VARCHAR2(32),
    span_id VARCHAR2(16),
    session_user VARCHAR2(128) DEFAULT USER,
    os_user VARCHAR2(128) DEFAULT SYS_CONTEXT('USERENV', 'OS_USER'),
    host VARCHAR2(256) DEFAULT SYS_CONTEXT('USERENV', 'HOST'),
    ip_address VARCHAR2(45) DEFAULT SYS_CONTEXT('USERENV', 'IP_ADDRESS')
);

COMMENT ON TABLE plt_telemetry_errors IS 'Internal error logging for PLTelemetry operations';
COMMENT ON COLUMN plt_telemetry_errors.module_name IS 'PLTelemetry module where error occurred';

PROMPT PLTelemetry tables created successfully.