-- PLTelemetry Database Tables - Fixed Version
-- This script creates all required tables for PLTelemetry
-- 
-- Tables created:
-- - plt_traces: Main trace records
-- - plt_spans: Span records within traces  
-- - plt_events: Events within spans
-- - plt_metrics: Metric records
-- - plt_queue: Async processing queue
-- - plt_failed_exports: Failed export attempts
-- - plt_telemetry_errors: Error logging

PROMPT Creating PLTelemetry tables...

-- Drop existing tables if they exist (for reinstall)
DECLARE
    l_sql VARCHAR2(1000);
    l_count NUMBER;
BEGIN
    FOR rec IN (
        SELECT table_name 
        FROM user_tables 
        WHERE table_name IN ('PLT_TRACES', 'PLT_SPANS', 'PLT_EVENTS', 'PLT_METRICS', 
                            'PLT_FAILED_EXPORTS', 'PLT_QUEUE', 'PLT_TELEMETRY_ERRORS',
                            'PLT_LOGS', 'PLT_SPAN_ATTRIBUTES')
    ) LOOP
        l_sql := 'DROP TABLE ' || rec.table_name || ' CASCADE CONSTRAINTS';
        EXECUTE IMMEDIATE l_sql;
        DBMS_OUTPUT.PUT_LINE('Dropped existing table: ' || rec.table_name);
    END LOOP;
END;
/

-- Main traces table
CREATE TABLE plt_traces (
    trace_id VARCHAR2(32) PRIMARY KEY,
    root_operation VARCHAR2(255) NOT NULL,
    start_time TIMESTAMP WITH TIME ZONE DEFAULT SYSTIMESTAMP NOT NULL,
    end_time TIMESTAMP WITH TIME ZONE,
    service_name VARCHAR2(100) DEFAULT 'oracle-plsql',
    service_instance VARCHAR2(255),
    tenant_id VARCHAR2(100)
);

COMMENT ON TABLE plt_traces IS 'OpenTelemetry traces - root operations';
COMMENT ON COLUMN plt_traces.trace_id IS '128-bit trace ID (32 hex chars)';
COMMENT ON COLUMN plt_traces.root_operation IS 'Name of the root operation';
COMMENT ON COLUMN plt_traces.service_name IS 'Service identifier';
COMMENT ON COLUMN plt_traces.service_instance IS 'Service instance identifier';
COMMENT ON COLUMN plt_traces.tenant_id IS 'Tenant identifier for multi-tenancy';

-- Spans table
CREATE TABLE plt_spans (
    span_id VARCHAR2(16) PRIMARY KEY,
    trace_id VARCHAR2(32) NOT NULL,
    parent_span_id VARCHAR2(16),
    operation_name VARCHAR2(255) NOT NULL,
    start_time TIMESTAMP WITH TIME ZONE DEFAULT SYSTIMESTAMP NOT NULL,
    end_time TIMESTAMP WITH TIME ZONE,
    duration_ms NUMBER,
    status VARCHAR2(50) DEFAULT 'RUNNING',
    tenant_id VARCHAR2(100),
    CONSTRAINT fk_spans_trace FOREIGN KEY (trace_id) REFERENCES plt_traces(trace_id),
    CONSTRAINT fk_spans_parent FOREIGN KEY (parent_span_id) REFERENCES plt_spans(span_id),
    CONSTRAINT chk_spans_status CHECK (status IN ('RUNNING', 'OK', 'ERROR', 'CANCELLED'))
);

COMMENT ON TABLE plt_spans IS 'OpenTelemetry spans - individual operations within traces';
COMMENT ON COLUMN plt_spans.span_id IS '64-bit span ID (16 hex chars)';
COMMENT ON COLUMN plt_spans.parent_span_id IS 'Parent span for nested operations';
COMMENT ON COLUMN plt_spans.duration_ms IS 'Span duration in milliseconds';
COMMENT ON COLUMN plt_spans.tenant_id IS 'Tenant identifier for multi-tenancy';

-- Events table
CREATE TABLE plt_events (
    event_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    span_id VARCHAR2(16) NOT NULL,
    event_name VARCHAR2(255) NOT NULL,
    event_time TIMESTAMP WITH TIME ZONE DEFAULT SYSTIMESTAMP NOT NULL,
    attributes VARCHAR2(4000),
    tenant_id VARCHAR2(100),
    CONSTRAINT fk_events_span FOREIGN KEY (span_id) REFERENCES plt_spans(span_id)
);

COMMENT ON TABLE plt_events IS 'Events within spans - point-in-time occurrences';
COMMENT ON COLUMN plt_events.attributes IS 'JSON attributes for the event';
COMMENT ON COLUMN plt_events.tenant_id IS 'Tenant identifier for multi-tenancy';

-- Metrics table
CREATE TABLE plt_metrics (
    metric_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    metric_name VARCHAR2(255) NOT NULL,
    metric_value NUMBER NOT NULL,
    metric_unit VARCHAR2(50),
    trace_id VARCHAR2(32),
    span_id VARCHAR2(16),
    timestamp TIMESTAMP WITH TIME ZONE DEFAULT SYSTIMESTAMP NOT NULL,
    attributes VARCHAR2(4000),
    tenant_id VARCHAR2(100),
    CONSTRAINT fk_metrics_trace FOREIGN KEY (trace_id) REFERENCES plt_traces(trace_id),
    CONSTRAINT fk_metrics_span FOREIGN KEY (span_id) REFERENCES plt_spans(span_id)
);

COMMENT ON TABLE plt_metrics IS 'Application metrics with telemetry context';
COMMENT ON COLUMN plt_metrics.metric_unit IS 'Unit of measurement (ms, bytes, requests, etc.)';
COMMENT ON COLUMN plt_metrics.attributes IS 'JSON attributes for the metric';
COMMENT ON COLUMN plt_metrics.tenant_id IS 'Tenant identifier for multi-tenancy';

-- Failed exports table
CREATE TABLE plt_failed_exports (
    export_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    export_time TIMESTAMP WITH TIME ZONE DEFAULT SYSTIMESTAMP NOT NULL,
    http_status NUMBER,
    payload VARCHAR2(4000),
    error_message VARCHAR2(4000),
    retry_count NUMBER DEFAULT 0,
    last_retry TIMESTAMP WITH TIME ZONE,
    tenant_id VARCHAR2(100)
);

COMMENT ON TABLE plt_failed_exports IS 'Failed telemetry export attempts for debugging';
COMMENT ON COLUMN plt_failed_exports.payload IS 'Truncated payload that failed to export';
COMMENT ON COLUMN plt_failed_exports.tenant_id IS 'Tenant identifier for multi-tenancy';

-- Async processing queue
CREATE TABLE plt_queue (
    queue_id NUMBER GENERATED BY DEFAULT AS IDENTITY (
        START WITH 1 
        MAXVALUE 9999999999999999999999999999 
        MINVALUE 1 
        NOCYCLE 
        CACHE 20 
        NOORDER 
        NOKEEP
    ) NOT NULL,
    payload VARCHAR2(4000) NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT SYSTIMESTAMP NOT NULL,
    processed CHAR(1) DEFAULT 'N' NOT NULL,
    process_attempts NUMBER DEFAULT 0 NOT NULL,
    processed_time TIMESTAMP WITH TIME ZONE,
    last_error VARCHAR2(4000),
    last_attempt_time TIMESTAMP WITH TIME ZONE,
    tenant_id VARCHAR2(100),
    CONSTRAINT pk_plt_queue PRIMARY KEY (queue_id),
    CONSTRAINT chk_plt_queue_processed CHECK (processed IN ('Y', 'N'))
);

COMMENT ON TABLE plt_queue IS 'Async processing queue for telemetry export';
COMMENT ON COLUMN plt_queue.payload IS 'JSON payload to be exported';
COMMENT ON COLUMN plt_queue.process_attempts IS 'Number of processing attempts (max 3)';
COMMENT ON COLUMN plt_queue.tenant_id IS 'Tenant identifier for multi-tenancy';

-- Error logging table
CREATE TABLE plt_telemetry_errors (
    error_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    error_time TIMESTAMP WITH TIME ZONE DEFAULT SYSTIMESTAMP NOT NULL,
    error_message VARCHAR2(4000),
    error_stack VARCHAR2(4000),
    error_code NUMBER,
    module_name VARCHAR2(100),
    trace_id VARCHAR2(32),
    span_id VARCHAR2(16),
    session_user VARCHAR2(128) DEFAULT USER,
    os_user VARCHAR2(128) DEFAULT SYS_CONTEXT('USERENV', 'OS_USER'),
    host VARCHAR2(256) DEFAULT SYS_CONTEXT('USERENV', 'HOST'),
    ip_address VARCHAR2(45) DEFAULT SYS_CONTEXT('USERENV', 'IP_ADDRESS'),
    tenant_id VARCHAR2(100)
);

COMMENT ON TABLE plt_telemetry_errors IS 'Internal error logging for PLTelemetry operations';
COMMENT ON COLUMN plt_telemetry_errors.module_name IS 'PLTelemetry module where error occurred';
COMMENT ON COLUMN plt_telemetry_errors.tenant_id IS 'Tenant identifier for multi-tenancy';

-- Logs table
CREATE TABLE plt_logs (
    log_id       NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    trace_id     VARCHAR2(32),
    span_id      VARCHAR2(16),
    log_level    VARCHAR2(10) NOT NULL,
    message      VARCHAR2(4000) NOT NULL,
    timestamp    TIMESTAMP WITH TIME ZONE DEFAULT SYSTIMESTAMP,
    attributes   VARCHAR2(4000) DEFAULT '{}',
    created_at   TIMESTAMP WITH TIME ZONE DEFAULT SYSTIMESTAMP,
    tenant_id    VARCHAR2(100)
);

COMMENT ON TABLE plt_logs IS 'Structured logs with optional trace correlation';
COMMENT ON COLUMN plt_logs.trace_id IS 'Optional trace ID for correlation';
COMMENT ON COLUMN plt_logs.span_id IS 'Optional span ID for correlation';
COMMENT ON COLUMN plt_logs.log_level IS 'Log severity level';
COMMENT ON COLUMN plt_logs.tenant_id IS 'Tenant identifier for multi-tenancy';

-- Span attributes table (normalized attributes for better querying)
CREATE TABLE plt_span_attributes (
    span_id         VARCHAR2(16) NOT NULL,
    attribute_key   VARCHAR2(255) NOT NULL,
    attribute_value VARCHAR2(4000),
    created_at      TIMESTAMP WITH TIME ZONE DEFAULT SYSTIMESTAMP,
    tenant_id       VARCHAR2(100),
    CONSTRAINT plt_span_attr_pk PRIMARY KEY (span_id, attribute_key)
);

COMMENT ON TABLE plt_span_attributes IS 'Normalized span attributes for efficient querying';
COMMENT ON COLUMN plt_span_attributes.span_id IS 'Reference to span (soft FK for flexibility)';
COMMENT ON COLUMN plt_span_attributes.attribute_key IS 'Attribute key name';
COMMENT ON COLUMN plt_span_attributes.attribute_value IS 'Attribute value (up to 4KB)';
COMMENT ON COLUMN plt_span_attributes.tenant_id IS 'Tenant identifier for multi-tenancy';

-- Fallbabk table for PLTelemetry logs
-- This table is used to store fallback configurations for PLTelemetry agents
CREATE TABLE plt_agent_registry (
    agent_id          VARCHAR2(100) DEFAULT 'PRIMARY' PRIMARY KEY,
    last_heartbeat    TIMESTAMP WITH TIME ZONE,
    last_process_time TIMESTAMP WITH TIME ZONE,
    items_processed   NUMBER DEFAULT 0,
    items_planned     NUMBER DEFAULT 0,
    process_interval  NUMBER DEFAULT 60, -- segundos
    next_run_expected TIMESTAMP WITH TIME ZONE,
    status_message    VARCHAR2(4000),
    created_at        TIMESTAMP WITH TIME ZONE DEFAULT SYSTIMESTAMP,
    updated_at        TIMESTAMP WITH TIME ZONE DEFAULT SYSTIMESTAMP
);

-- configurations for fallback mechanism
CREATE TABLE plt_failover_config (
    config_key         VARCHAR2(50) PRIMARY KEY,
    config_value       VARCHAR2(200) NOT NULL,
    description        VARCHAR2(500),
    updated_at         TIMESTAMP WITH TIME ZONE DEFAULT SYSTIMESTAMP
);

-- default configurations for fallback mechanism
INSERT INTO plt_failover_config (config_key, config_value, description) VALUES 
    ('ENABLED', 'Y', 'Enable/disable fallback mechanism'),
    ('MAX_MISSED_RUNS', '3', 'Number of missed runs before activating fallback'),
    ('CHECK_INTERVAL', '60', 'Seconds between health checks'),
    ('QUEUE_THRESHOLD', '1000', 'Max queue items before considering agent overloaded');

INSERT INTO plt_failover_config (config_key, config_value, description)
VALUES ('FALLBACK_BACKEND', 'OTLP_BRIDGE', 'Backend to use when in fallback mode');

COMMIT;

CREATE TABLE plt_fallback_metrics (
    metric_time      TIMESTAMP WITH TIME ZONE DEFAULT SYSTIMESTAMP,
    batch_size       NUMBER,
    items_processed  NUMBER,
    items_failed     NUMBER,
    avg_latency_ms   NUMBER,
    http_errors      NUMBER,
    total_duration_ms NUMBER
);

-- Índice para queries eficientes
CREATE INDEX idx_fallback_metrics_time ON plt_fallback_metrics(metric_time DESC);

CREATE TABLE plt_rate_limit_config (
    latency_threshold_ms  NUMBER NOT NULL,
    optimal_batch_size    NUMBER NOT NULL,
    priority              NUMBER NOT NULL,  -- Lower number = higher priority
    description           VARCHAR2(200),
    is_active            VARCHAR2(1) DEFAULT 'Y',
    CONSTRAINT plt_rate_limit_pk PRIMARY KEY (priority),
    CONSTRAINT plt_rate_limit_chk CHECK (latency_threshold_ms >= 0),
    CONSTRAINT plt_rate_limit_size_chk CHECK (optimal_batch_size > 0)
);

-- Default configuration (adjustable per environment)
INSERT INTO plt_rate_limit_config (priority, latency_threshold_ms, optimal_batch_size, description) VALUES
(1, 0,    500, 'Ultra fast - aggressive processing'),
(2, 100,  300, 'Fast - normal processing'),
(3, 500,  150, 'Moderate - some latency detected'),
(4, 1000, 75,  'Slow - significant latency'),
(5, 2000, 25,  'Very slow - system struggling'),
(6, 9999999, 10, 'Fallback - minimum processing');

COMMIT;
/

-- Añadir configuración del OTLP Bridge
INSERT INTO plt_failover_config (config_key, config_value, description) VALUES 
    ('OTLP_COLLECTOR_URL', 'http://plt-otel-collector:4318', 'OTLP Collector endpoint for fallback'),
    ('OTLP_SERVICE_NAME', 'oracle-plsql', 'Service name for OTLP telemetry'),
    ('OTLP_SERVICE_VERSION', '1.0.0', 'Service version for OTLP telemetry'),
    ('OTLP_ENVIRONMENT', 'production', 'Deployment environment');

INSERT INTO plt_failover_config (
    config_key, 
    config_value, 
    description, 
    updated_at
) VALUES (
    'AGENT_PULSE_MODE', 
    'PULSE1', 
    'Current agent throttling pulse mode (PULSE1, PULSE2, PULSE3, PULSE4, COMA)', 
    SYSTIMESTAMP
);


COMMIT;
/

-- ========================================================================
-- PLTelemetry Pulse Throttling System
-- ========================================================================
-- This script creates the throttling configuration table and functions
-- to coordinate throttling between the Go agent and PLTelemetry core
-- ========================================================================

PROMPT Creating PLTelemetry Pulse Throttling System...

-- ========================================================================
-- 1. THROTTLING CONFIGURATION TABLE
-- ========================================================================

CREATE TABLE plt_pulse_throttling_config (
    pulse_mode           VARCHAR2(10) PRIMARY KEY,
    capacity_multiplier  NUMBER(5,4) NOT NULL,
    batch_multiplier     NUMBER(5,4) NOT NULL, 
    interval_multiplier  NUMBER(5,2) NOT NULL,
    sampling_rate        NUMBER(5,4) NOT NULL,
    metrics_enabled      VARCHAR2(1) DEFAULT 'Y' CHECK (metrics_enabled IN ('Y', 'N')),
    logs_enabled         VARCHAR2(1) DEFAULT 'Y' CHECK (logs_enabled IN ('Y', 'N')),
    queue_processing     VARCHAR2(1) DEFAULT 'Y' CHECK (queue_processing IN ('Y', 'N')),
    description          VARCHAR2(200),
    is_active           VARCHAR2(1) DEFAULT 'Y' CHECK (is_active IN ('Y', 'N')),
    created_at          TIMESTAMP DEFAULT SYSTIMESTAMP,
    updated_at          TIMESTAMP DEFAULT SYSTIMESTAMP
);

COMMENT ON TABLE plt_pulse_throttling_config IS 'Pulse mode throttling configuration for coordinated capacity management';
COMMENT ON COLUMN plt_pulse_throttling_config.pulse_mode IS 'Pulse mode from Go agent: PULSE1, PULSE2, PULSE3, PULSE4, COMA';
COMMENT ON COLUMN plt_pulse_throttling_config.capacity_multiplier IS 'Overall system capacity multiplier (0.0-1.0)';
COMMENT ON COLUMN plt_pulse_throttling_config.batch_multiplier IS 'Batch size multiplier for queue processing';
COMMENT ON COLUMN plt_pulse_throttling_config.interval_multiplier IS 'Scheduler interval multiplier (>1 = slower)';
COMMENT ON COLUMN plt_pulse_throttling_config.sampling_rate IS 'Telemetry sampling rate (0.0-1.0, 1.0=100%)';
COMMENT ON COLUMN plt_pulse_throttling_config.metrics_enabled IS 'Enable/disable metrics collection';
COMMENT ON COLUMN plt_pulse_throttling_config.logs_enabled IS 'Enable/disable log collection';
COMMENT ON COLUMN plt_pulse_throttling_config.queue_processing IS 'Enable/disable queue processing';

-- ========================================================================
-- 2. DEFAULT THROTTLING CONFIGURATIONS
-- ========================================================================

-- Insert default configurations (fully configurable per environment)
INSERT INTO plt_pulse_throttling_config (
    pulse_mode, capacity_multiplier, batch_multiplier, interval_multiplier, 
    sampling_rate, metrics_enabled, logs_enabled, queue_processing, description
) VALUES 
('PULSE1', 1.0000, 1.0000, 1.00, 1.0000, 'Y', 'Y', 'Y', 'Full capacity - no throttling'),
('PULSE2', 0.5000, 0.5000, 2.00, 0.7500, 'Y', 'Y', 'Y', 'Half capacity - moderate load'),
('PULSE3', 0.2500, 0.2500, 4.00, 0.5000, 'Y', 'Y', 'Y', 'Quarter capacity - high load'),
('PULSE4', 0.1000, 0.1000, 10.0, 0.2500, 'Y', 'Y', 'Y', 'Minimal capacity - critical load'),
('COMA',   0.0000, 0.0100, 60.0, 0.0500, 'N', 'N', 'N', 'Hibernation mode - system overload');

-- ========================================================================
-- 3. PULSE THROTTLING TYPE FOR PL/SQL
-- ========================================================================

CREATE OR REPLACE TYPE plt_pulse_config_t AS OBJECT (
    pulse_mode           VARCHAR2(10),
    capacity_multiplier  NUMBER,
    batch_multiplier     NUMBER,
    interval_multiplier  NUMBER,
    sampling_rate        NUMBER,
    metrics_enabled      VARCHAR2(1),
    logs_enabled         VARCHAR2(1),
    queue_processing     VARCHAR2(1),
    description          VARCHAR2(200)
);
/

CREATE INDEX idx_plt_pulse_config_active ON plt_pulse_throttling_config(is_active, pulse_mode);


COMMIT;
/